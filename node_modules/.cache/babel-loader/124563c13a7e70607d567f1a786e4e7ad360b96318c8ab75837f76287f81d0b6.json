{"ast":null,"code":"var _jsxFileName = \"P:\\\\mango-area\\\\mango-bruise-area\\\\src\\\\components\\\\CropImage\\\\CropImage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './CropImage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CropImage = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [croppedImage, setCroppedImage] = useState(null);\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 30,\n    height: 30,\n    x: 0,\n    y: 0\n  });\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImage(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleCrop = () => {\n    // Here, we would typically use a cropping library (like react-image-crop) to crop the image\n    // For simplicity, let's assume we just set the cropped image as a portion of the original image\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.src = image;\n    img.onload = () => {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = crop;\n      canvas.width = width;\n      canvas.height = height;\n      ctx.drawImage(img, x, y, width, height, 0, 0, width, height);\n      setCroppedImage(canvas.toDataURL());\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crop-image-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Cropper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), image && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crop-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: \"To be cropped\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCrop,\n        children: \"Crop Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), croppedImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: croppedImage,\n      alt: \"Cropped\",\n      className: \"cropped-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(CropImage, \"KIcrkIyxm104mZGgLVPWPNycdIU=\");\n_c = CropImage;\nexport default CropImage;\nvar _c;\n$RefreshReg$(_c, \"CropImage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","CropImage","_s","image","setImage","croppedImage","setCroppedImage","crop","setCrop","unit","width","height","x","y","handleImageChange","e","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","handleCrop","canvas","document","createElement","ctx","getContext","img","Image","src","onload","drawImage","toDataURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","alt","onClick","_c","$RefreshReg$"],"sources":["P:/mango-area/mango-bruise-area/src/components/CropImage/CropImage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './CropImage.css';\r\n\r\nconst CropImage = () => {\r\n  const [image, setImage] = useState(null);\r\n  const [croppedImage, setCroppedImage] = useState(null);\r\n  const [crop, setCrop] = useState({ unit: '%', width: 30, height: 30, x: 0, y: 0 });\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleCrop = () => {\r\n    // Here, we would typically use a cropping library (like react-image-crop) to crop the image\r\n    // For simplicity, let's assume we just set the cropped image as a portion of the original image\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const img = new Image();\r\n    img.src = image;\r\n\r\n    img.onload = () => {\r\n      const { x, y, width, height } = crop;\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      ctx.drawImage(img, x, y, width, height, 0, 0, width, height);\r\n      setCroppedImage(canvas.toDataURL());\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"crop-image-container\">\r\n      <h1>Image Cropper</h1>\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\r\n      {image && (\r\n        <>\r\n          <div className=\"crop-container\">\r\n            <img src={image} alt=\"To be cropped\" />\r\n            {/* Add a crop area here */}\r\n          </div>\r\n          <button onClick={handleCrop}>Crop Image</button>\r\n        </>\r\n      )}\r\n      {croppedImage && <img src={croppedImage} alt=\"Cropped\" className=\"cropped-image\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CropImage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}