{"ast":null,"code":"// cropUtils.js\nexport const getCroppedImg = (imageSrc, pixelCrop) => {\n  const image = new Image();\n  image.src = imageSrc;\n  return new Promise(resolve => {\n    image.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size to the cropped area size\n      canvas.width = pixelCrop.width;\n      canvas.height = pixelCrop.height;\n\n      // Draw the image to the canvas with the selected crop area\n      ctx.drawImage(image, pixelCrop.x, pixelCrop.y, pixelCrop.width, pixelCrop.height, 0, 0, pixelCrop.width, pixelCrop.height);\n\n      // Generate the data URL of the cropped image\n      const base64Image = canvas.toDataURL('image/png');\n      resolve(base64Image);\n    };\n  });\n};","map":{"version":3,"names":["getCroppedImg","imageSrc","pixelCrop","image","Image","src","Promise","resolve","onload","canvas","document","createElement","ctx","getContext","width","height","drawImage","x","y","base64Image","toDataURL"],"sources":["P:/mango-area/mango-bruise-area/src/components/CropImage/cropUtils.js"],"sourcesContent":["// cropUtils.js\r\nexport const getCroppedImg = (imageSrc, pixelCrop) => {\r\n    const image = new Image();\r\n    image.src = imageSrc;\r\n\r\n    return new Promise((resolve) => {\r\n        image.onload = () => {\r\n            const canvas = document.createElement('canvas');\r\n            const ctx = canvas.getContext('2d');\r\n\r\n            // Set canvas size to the cropped area size\r\n            canvas.width = pixelCrop.width;\r\n            canvas.height = pixelCrop.height;\r\n\r\n            // Draw the image to the canvas with the selected crop area\r\n            ctx.drawImage(\r\n                image,\r\n                pixelCrop.x,\r\n                pixelCrop.y,\r\n                pixelCrop.width,\r\n                pixelCrop.height,\r\n                0,\r\n                0,\r\n                pixelCrop.width,\r\n                pixelCrop.height\r\n            );\r\n\r\n            // Generate the data URL of the cropped image\r\n            const base64Image = canvas.toDataURL('image/png');\r\n            resolve(base64Image);\r\n        };\r\n    });\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAGA,CAACC,QAAQ,EAAEC,SAAS,KAAK;EAClD,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EACzBD,KAAK,CAACE,GAAG,GAAGJ,QAAQ;EAEpB,OAAO,IAAIK,OAAO,CAAEC,OAAO,IAAK;IAC5BJ,KAAK,CAACK,MAAM,GAAG,MAAM;MACjB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;;MAEnC;MACAJ,MAAM,CAACK,KAAK,GAAGZ,SAAS,CAACY,KAAK;MAC9BL,MAAM,CAACM,MAAM,GAAGb,SAAS,CAACa,MAAM;;MAEhC;MACAH,GAAG,CAACI,SAAS,CACTb,KAAK,EACLD,SAAS,CAACe,CAAC,EACXf,SAAS,CAACgB,CAAC,EACXhB,SAAS,CAACY,KAAK,EACfZ,SAAS,CAACa,MAAM,EAChB,CAAC,EACD,CAAC,EACDb,SAAS,CAACY,KAAK,EACfZ,SAAS,CAACa,MACd,CAAC;;MAED;MACA,MAAMI,WAAW,GAAGV,MAAM,CAACW,SAAS,CAAC,WAAW,CAAC;MACjDb,OAAO,CAACY,WAAW,CAAC;IACxB,CAAC;EACL,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}